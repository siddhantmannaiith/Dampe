import numpy as np
import matplotlib.pyplot as plt

def plotSED(Emin, Emax):
    # File paths for Google Colab or local environment
    fluxfile = '/content/Abell_flux_SED_binned.dat'  # Update as necessary

    try:
        # Load the SED data
        data = np.loadtxt(fluxfile)
        emin = data[:, 0]
        emax = data[:, 1]
        flux = data[:, 2]
        error = data[:, 3]
        TSvalue = data[:, 4]
        upperLimit = data[:, 5]

        x = np.sqrt(emin * emax)
        xerr = np.array([x - emin, emax - x])
        y = x**2 * flux / (emax - emin)
        yerr = x**2 * error / (emax - emin)
        y_ul = x**2 * upperLimit / (emax - emin)
        y_ulerr = np.array([0.5 * y_ul, [0] * len(y)])

        fig, ax = plt.subplots()

        # Plot detections (TS > 9) in blue
        ax.errorbar(x[TSvalue > 9], y[TSvalue > 9], xerr=xerr[:, TSvalue > 9], yerr=yerr[TSvalue > 9], fmt='.k', color='blue', label='Detected', markersize=12)

        # Plot upper limits (TS < 9) in red
        ax.errorbar(x[TSvalue < 9], y_ul[TSvalue < 9], xerr=xerr[:, TSvalue < 9], yerr=y_ulerr[:, TSvalue < 9], fmt='.k', color='red', uplims=True, label='Upper Limit', markersize=12)

        # Set axis limits and scales
        ax.set_xlim(3000, 1e6)
        ax.set_ylim(1e-7, 1e-3)
        ax.set_xscale('log')
        ax.set_yscale('log')

        # Set axis labels with bold font
        ax.set_xlabel(r'Energy [MeV]', fontweight='bold')
        ax.set_ylabel(r'E$^2$ dN/dE [MeV cm$^{-2}$ s$^{-1}$]', fontweight='bold', fontsize=12)

        # Plot TS values on a secondary axis
        ax2 = ax.twinx()
        ax2.bar(emin, TSvalue, width= (emax - emin), color='gray', edgecolor='gray', alpha=0.5,align="edge")
        #ax2.bar(x, TSvalue, width=(emax - emin), align="edge", alpha=0.4, edgecolor='black')
        ax2.set_ylim(bottom=0)
        ax2.set_xscale('log')
        ax2.set_ylabel('TS value', fontweight='bold')

        # Save the figure
        png_file = fluxfile.replace('.dat', '.png')
        pdf_file = fluxfile.replace('.dat', '.pdf')
        plt.savefig(png_file)
        plt.savefig(pdf_file)

        return png_file, pdf_file

    except Exception as e:
        print(f"An error occurred: {e}")

# Call the function with example Emin and Emax
png_path, pdf_path = plotSED(3200, 1e6)
print(f"Plot saved as PNG: {png_path}")
print(f"Plot saved as PDF: {pdf_path}")
